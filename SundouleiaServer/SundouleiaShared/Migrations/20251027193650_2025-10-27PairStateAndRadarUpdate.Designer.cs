// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SundouleiaShared.Data;

#nullable disable

namespace SundouleiaShared.Migrations
{
    [DbContext(typeof(SundouleiaDbContext))]
    [Migration("20251027193650_2025-10-27PairStateAndRadarUpdate")]
    partial class _20251027PairStateAndRadarUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SundouleiaShared.Models.AccountClaimAuth", b =>
                {
                    b.Property<decimal>("DiscordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_id");

                    b.Property<string>("InitialGeneratedKey")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("initial_generated_key");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("VerificationCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("verification_code");

                    b.HasKey("DiscordId")
                        .HasName("pk_account_claim_auth");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_account_claim_auth_user_uid");

                    b.ToTable("account_claim_auth", (string)null);
                });

            modelBuilder.Entity("SundouleiaShared.Models.AccountReputation", b =>
                {
                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<int>("ChatStrikes")
                        .HasColumnType("integer")
                        .HasColumnName("chat_strikes");

                    b.Property<DateTime>("ChatTimeout")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("chat_timeout");

                    b.Property<bool>("ChatUsage")
                        .HasColumnType("boolean")
                        .HasColumnName("chat_usage");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("boolean")
                        .HasColumnName("is_banned");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_verified");

                    b.Property<int>("ProfileEditStrikes")
                        .HasColumnType("integer")
                        .HasColumnName("profile_edit_strikes");

                    b.Property<DateTime>("ProfileEditTimeout")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("profile_edit_timeout");

                    b.Property<bool>("ProfileEditing")
                        .HasColumnType("boolean")
                        .HasColumnName("profile_editing");

                    b.Property<int>("ProfileViewStrikes")
                        .HasColumnType("integer")
                        .HasColumnName("profile_view_strikes");

                    b.Property<DateTime>("ProfileViewTimeout")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("profile_view_timeout");

                    b.Property<bool>("ProfileViewing")
                        .HasColumnType("boolean")
                        .HasColumnName("profile_viewing");

                    b.Property<int>("RadarStrikes")
                        .HasColumnType("integer")
                        .HasColumnName("radar_strikes");

                    b.Property<DateTime>("RadarTimeout")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("radar_timeout");

                    b.Property<bool>("RadarUsage")
                        .HasColumnType("boolean")
                        .HasColumnName("radar_usage");

                    b.HasKey("UserUID")
                        .HasName("pk_account_reputation");

                    b.ToTable("account_reputation", (string)null);
                });

            modelBuilder.Entity("SundouleiaShared.Models.Auth", b =>
                {
                    b.Property<string>("HashedKey")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("hashed_key");

                    b.Property<string>("PrimaryUserUID")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasColumnName("primary_user_uid");

                    b.Property<string>("UserUID")
                        .IsRequired()
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.HasKey("HashedKey")
                        .HasName("pk_auth");

                    b.HasIndex("PrimaryUserUID")
                        .HasDatabaseName("ix_auth_primary_user_uid");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_auth_user_uid");

                    b.ToTable("auth", (string)null);
                });

            modelBuilder.Entity("SundouleiaShared.Models.Banned", b =>
                {
                    b.Property<string>("CharacterIdentification")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("character_identification");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<string>("UserUID")
                        .HasColumnType("text")
                        .HasColumnName("user_uid");

                    b.HasKey("CharacterIdentification")
                        .HasName("pk_banned_users");

                    b.ToTable("banned_users", (string)null);
                });

            modelBuilder.Entity("SundouleiaShared.Models.BannedRegistrations", b =>
                {
                    b.Property<string>("DiscordId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("discord_id");

                    b.HasKey("DiscordId")
                        .HasName("pk_banned_registrations");

                    b.ToTable("banned_registrations", (string)null);
                });

            modelBuilder.Entity("SundouleiaShared.Models.BlockedUser", b =>
                {
                    b.Property<string>("UserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid")
                        .HasColumnOrder(0);

                    b.Property<string>("OtherUserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("other_user_uid")
                        .HasColumnOrder(1);

                    b.HasKey("UserUID", "OtherUserUID")
                        .HasName("pk_blocked_users");

                    b.HasIndex("OtherUserUID")
                        .HasDatabaseName("ix_blocked_users_other_user_uid");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_blocked_users_user_uid");

                    b.ToTable("blocked_users", (string)null);
                });

            modelBuilder.Entity("SundouleiaShared.Models.ClientPair", b =>
                {
                    b.Property<string>("UserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid")
                        .HasColumnOrder(0);

                    b.Property<string>("OtherUserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("other_user_uid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("TempAccepterUID")
                        .HasColumnType("text")
                        .HasColumnName("temp_accepter_uid");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("timestamp");

                    b.HasKey("UserUID", "OtherUserUID")
                        .HasName("pk_client_pairs");

                    b.HasIndex("OtherUserUID")
                        .HasDatabaseName("ix_client_pairs_other_user_uid");

                    b.HasIndex("TempAccepterUID")
                        .HasDatabaseName("ix_client_pairs_temp_accepter_uid");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_client_pairs_user_uid");

                    b.ToTable("client_pairs", (string)null);
                });

            modelBuilder.Entity("SundouleiaShared.Models.ClientPairPermissions", b =>
                {
                    b.Property<string>("UserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("OtherUserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("other_user_uid");

                    b.Property<bool>("AllowAnimations")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_animations");

                    b.Property<bool>("AllowSounds")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_sounds");

                    b.Property<bool>("AllowVfx")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_vfx");

                    b.Property<bool>("PauseVisuals")
                        .HasColumnType("boolean")
                        .HasColumnName("pause_visuals");

                    b.HasKey("UserUID", "OtherUserUID")
                        .HasName("pk_client_pair_permissions");

                    b.HasIndex("OtherUserUID")
                        .HasDatabaseName("ix_client_pair_permissions_other_user_uid");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_client_pair_permissions_user_uid");

                    b.ToTable("client_pair_permissions", (string)null);
                });

            modelBuilder.Entity("SundouleiaShared.Models.GlobalPermissions", b =>
                {
                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<bool>("DefaultAllowAnimations")
                        .HasColumnType("boolean")
                        .HasColumnName("default_allow_animations");

                    b.Property<bool>("DefaultAllowSounds")
                        .HasColumnType("boolean")
                        .HasColumnName("default_allow_sounds");

                    b.Property<bool>("DefaultAllowVfx")
                        .HasColumnType("boolean")
                        .HasColumnName("default_allow_vfx");

                    b.HasKey("UserUID")
                        .HasName("pk_user_global_permissions");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_user_global_permissions_user_uid");

                    b.ToTable("user_global_permissions", (string)null);
                });

            modelBuilder.Entity("SundouleiaShared.Models.PairRequest", b =>
                {
                    b.Property<string>("UserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<string>("OtherUserUID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("other_user_uid");

                    b.Property<string>("AttachedMessage")
                        .HasColumnType("text")
                        .HasColumnName("attached_message");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time");

                    b.Property<int>("FromWorldId")
                        .HasColumnType("integer")
                        .HasColumnName("from_world_id");

                    b.Property<int>("FromZoneId")
                        .HasColumnType("integer")
                        .HasColumnName("from_zone_id");

                    b.Property<bool>("IsTemporary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_temporary");

                    b.HasKey("UserUID", "OtherUserUID")
                        .HasName("pk_pair_requests");

                    b.HasIndex("OtherUserUID")
                        .HasDatabaseName("ix_pair_requests_other_user_uid");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_pair_requests_user_uid");

                    b.ToTable("pair_requests", (string)null);
                });

            modelBuilder.Entity("SundouleiaShared.Models.ReportedRadar", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("report_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReportID"));

                    b.Property<byte>("ApartmentDivision")
                        .HasColumnType("smallint")
                        .HasColumnName("apartment_division");

                    b.Property<bool>("IsIndoor")
                        .HasColumnType("boolean")
                        .HasColumnName("is_indoor");

                    b.Property<int>("Kind")
                        .HasColumnType("integer")
                        .HasColumnName("kind");

                    b.Property<byte>("PlotIndex")
                        .HasColumnType("smallint")
                        .HasColumnName("plot_index");

                    b.Property<string>("RecentRadarChatHistory")
                        .HasColumnType("text")
                        .HasColumnName("recent_radar_chat_history");

                    b.Property<string>("ReportReason")
                        .HasColumnType("text")
                        .HasColumnName("report_reason");

                    b.Property<DateTime>("ReportTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("report_time");

                    b.Property<string>("ReportedUserUID")
                        .HasColumnType("text")
                        .HasColumnName("reported_user_uid");

                    b.Property<string>("ReporterUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("reporter_uid");

                    b.Property<byte>("RoomNumber")
                        .HasColumnType("smallint")
                        .HasColumnName("room_number");

                    b.Property<int>("TerritoryId")
                        .HasColumnType("integer")
                        .HasColumnName("territory_id");

                    b.Property<byte>("WardIndex")
                        .HasColumnType("smallint")
                        .HasColumnName("ward_index");

                    b.Property<int>("WorldId")
                        .HasColumnType("integer")
                        .HasColumnName("world_id");

                    b.HasKey("ReportID")
                        .HasName("pk_reported_radars");

                    b.HasIndex("Kind")
                        .HasDatabaseName("ix_reported_radars_kind");

                    b.HasIndex("ReporterUID")
                        .HasDatabaseName("ix_reported_radars_reporter_uid");

                    b.HasIndex("TerritoryId")
                        .HasDatabaseName("ix_reported_radars_territory_id");

                    b.HasIndex("WorldId")
                        .HasDatabaseName("ix_reported_radars_world_id");

                    b.ToTable("reported_radars", (string)null);
                });

            modelBuilder.Entity("SundouleiaShared.Models.ReportedUserProfile", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("report_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReportID"));

                    b.Property<string>("ReportReason")
                        .HasColumnType("text")
                        .HasColumnName("report_reason");

                    b.Property<DateTime>("ReportTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("report_time");

                    b.Property<string>("ReportedUserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("reported_user_uid");

                    b.Property<string>("ReportingUserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("reporting_user_uid");

                    b.Property<string>("SnapshotDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("snapshot_description");

                    b.Property<string>("SnapshotImage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("snapshot_image");

                    b.Property<bool>("SnapshotIsNSFW")
                        .HasColumnType("boolean")
                        .HasColumnName("snapshot_is_nsfw");

                    b.HasKey("ReportID")
                        .HasName("pk_reported_profiles");

                    b.HasIndex("ReportedUserUID")
                        .HasDatabaseName("ix_reported_profiles_reported_user_uid");

                    b.HasIndex("ReportingUserUID")
                        .HasDatabaseName("ix_reported_profiles_reporting_user_uid");

                    b.ToTable("reported_profiles", (string)null);
                });

            modelBuilder.Entity("SundouleiaShared.Models.User", b =>
                {
                    b.Property<string>("UID")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("uid");

                    b.Property<string>("Alias")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("alias");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login");

                    b.Property<int>("Tier")
                        .HasColumnType("integer")
                        .HasColumnName("tier");

                    b.HasKey("UID")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("SundouleiaShared.Models.UserProfileData", b =>
                {
                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid");

                    b.Property<int>("AvatarBG")
                        .HasColumnType("integer")
                        .HasColumnName("avatar_bg");

                    b.Property<int>("AvatarBorder")
                        .HasColumnType("integer")
                        .HasColumnName("avatar_border");

                    b.Property<int>("AvatarOverlay")
                        .HasColumnType("integer")
                        .HasColumnName("avatar_overlay");

                    b.Property<int>("AvatarVis")
                        .HasColumnType("integer")
                        .HasColumnName("avatar_vis");

                    b.Property<string>("Base64AvatarData")
                        .HasColumnType("text")
                        .HasColumnName("base64avatar_data");

                    b.Property<int>("DecorationVis")
                        .HasColumnType("integer")
                        .HasColumnName("decoration_vis");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DescriptionBG")
                        .HasColumnType("integer")
                        .HasColumnName("description_bg");

                    b.Property<int>("DescriptionBorder")
                        .HasColumnType("integer")
                        .HasColumnName("description_border");

                    b.Property<int>("DescriptionOverlay")
                        .HasColumnType("integer")
                        .HasColumnName("description_overlay");

                    b.Property<int>("DescriptionVis")
                        .HasColumnType("integer")
                        .HasColumnName("description_vis");

                    b.Property<bool>("FlaggedForReport")
                        .HasColumnType("boolean")
                        .HasColumnName("flagged_for_report");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disabled");

                    b.Property<bool>("IsNSFW")
                        .HasColumnType("boolean")
                        .HasColumnName("is_nsfw");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<int>("MainBG")
                        .HasColumnType("integer")
                        .HasColumnName("main_bg");

                    b.Property<int>("MainBorder")
                        .HasColumnType("integer")
                        .HasColumnName("main_border");

                    b.HasKey("UserUID")
                        .HasName("pk_user_profile");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_user_profile_user_uid");

                    b.ToTable("user_profile", (string)null);
                });

            modelBuilder.Entity("SundouleiaShared.Models.UserRadarInfo", b =>
                {
                    b.Property<string>("UserUID")
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_uid")
                        .HasColumnOrder(0);

                    b.Property<string>("HashedCID")
                        .HasColumnType("text")
                        .HasColumnName("hashed_cid");

                    b.Property<int>("TerritoryId")
                        .HasColumnType("integer")
                        .HasColumnName("territory_id")
                        .HasColumnOrder(2);

                    b.Property<int>("WorldId")
                        .HasColumnType("integer")
                        .HasColumnName("world_id")
                        .HasColumnOrder(1);

                    b.HasKey("UserUID")
                        .HasName("pk_user_radar_info");

                    b.HasIndex("TerritoryId")
                        .HasDatabaseName("ix_user_radar_info_territory_id");

                    b.HasIndex("UserUID")
                        .HasDatabaseName("ix_user_radar_info_user_uid");

                    b.HasIndex("WorldId")
                        .HasDatabaseName("ix_user_radar_info_world_id");

                    b.ToTable("user_radar_info", (string)null);
                });

            modelBuilder.Entity("SundouleiaShared.Models.AccountClaimAuth", b =>
                {
                    b.HasOne("SundouleiaShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .HasConstraintName("fk_account_claim_auth_users_user_uid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SundouleiaShared.Models.AccountReputation", b =>
                {
                    b.HasOne("SundouleiaShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_account_reputation_users_user_uid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SundouleiaShared.Models.Auth", b =>
                {
                    b.HasOne("SundouleiaShared.Models.User", "PrimaryUser")
                        .WithMany()
                        .HasForeignKey("PrimaryUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auth_users_primary_user_uid");

                    b.HasOne("SundouleiaShared.Models.AccountReputation", "AccountRep")
                        .WithMany()
                        .HasForeignKey("PrimaryUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auth_account_reputation_primary_user_uid");

                    b.HasOne("SundouleiaShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auth_users_user_uid");

                    b.Navigation("AccountRep");

                    b.Navigation("PrimaryUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SundouleiaShared.Models.BlockedUser", b =>
                {
                    b.HasOne("SundouleiaShared.Models.User", "OtherUser")
                        .WithMany()
                        .HasForeignKey("OtherUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_blocked_users_users_other_user_uid");

                    b.HasOne("SundouleiaShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_blocked_users_users_user_uid");

                    b.Navigation("OtherUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SundouleiaShared.Models.ClientPair", b =>
                {
                    b.HasOne("SundouleiaShared.Models.User", "OtherUser")
                        .WithMany()
                        .HasForeignKey("OtherUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_pairs_users_other_user_uid");

                    b.HasOne("SundouleiaShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_pairs_users_user_uid");

                    b.Navigation("OtherUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SundouleiaShared.Models.ClientPairPermissions", b =>
                {
                    b.HasOne("SundouleiaShared.Models.User", "OtherUser")
                        .WithMany()
                        .HasForeignKey("OtherUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_pair_permissions_users_other_user_uid");

                    b.HasOne("SundouleiaShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_pair_permissions_users_user_uid");

                    b.Navigation("OtherUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SundouleiaShared.Models.GlobalPermissions", b =>
                {
                    b.HasOne("SundouleiaShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_global_permissions_users_user_uid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SundouleiaShared.Models.PairRequest", b =>
                {
                    b.HasOne("SundouleiaShared.Models.User", "OtherUser")
                        .WithMany()
                        .HasForeignKey("OtherUserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pair_requests_users_other_user_uid");

                    b.HasOne("SundouleiaShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pair_requests_users_user_uid");

                    b.Navigation("OtherUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SundouleiaShared.Models.ReportedRadar", b =>
                {
                    b.HasOne("SundouleiaShared.Models.User", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterUID")
                        .HasConstraintName("fk_reported_radars_users_reporter_uid");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("SundouleiaShared.Models.ReportedUserProfile", b =>
                {
                    b.HasOne("SundouleiaShared.Models.User", "ReportedUser")
                        .WithMany()
                        .HasForeignKey("ReportedUserUID")
                        .HasConstraintName("fk_reported_profiles_users_reported_user_uid");

                    b.HasOne("SundouleiaShared.Models.User", "ReportingUser")
                        .WithMany()
                        .HasForeignKey("ReportingUserUID")
                        .HasConstraintName("fk_reported_profiles_users_reporting_user_uid");

                    b.Navigation("ReportedUser");

                    b.Navigation("ReportingUser");
                });

            modelBuilder.Entity("SundouleiaShared.Models.UserProfileData", b =>
                {
                    b.HasOne("SundouleiaShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_profile_users_user_uid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SundouleiaShared.Models.UserRadarInfo", b =>
                {
                    b.HasOne("SundouleiaShared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_radar_info_users_user_uid");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
